services:
  postgres:
    image: postgres:15
    container_name: n8n_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: evolutiondb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: evolution_redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  evolution-api:
    image: atendai/evolution-api:latest
    container_name: evolution_api
    restart: always
    ports:
      - "8081:8080"
    environment:
      SERVER_PORT: 8080
      AUTHENTICATION_API_KEY: ${AUTHENTICATION_API_KEY}
      AUTHENTICATION_TYPE: ${AUTHENTICATION_TYPE}
      AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES: ${AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES}
      DATABASE_PROVIDER: ${DATABASE_PROVIDER}
      DATABASE_CONNECTION_URI: ${DATABASE_CONNECTION_URI}
      DATABASE_ENABLED: ${DATABASE_ENABLED}
      DATABASE_CONNECTION_CLIENT_NAME: ${DATABASE_CONNECTION_CLIENT_NAME}
      DATABASE_SAVE_DATA_INSTANCE: ${DATABASE_SAVE_DATA_INSTANCE}
      DATABASE_SAVE_DATA_NEW_MESSAGE: ${DATABASE_SAVE_DATA_NEW_MESSAGE}
      DATABASE_SAVE_MESSAGE_UPDATE: ${DATABASE_SAVE_MESSAGE_UPDATE}
      DATABASE_SAVE_DATA_CONTACTS: ${DATABASE_SAVE_DATA_CONTACTS}
      DATABASE_SAVE_DATA_CHATS: ${DATABASE_SAVE_DATA_CHATS}
      DATABASE_SAVE_DATA_LABELS: ${DATABASE_SAVE_DATA_LABELS}
      DATABASE_SAVE_DATA_HISTORIC: ${DATABASE_SAVE_DATA_HISTORIC}
      CACHE_REDIS_ENABLED: ${CACHE_REDIS_ENABLED}
      CACHE_REDIS_URI: ${CACHE_REDIS_URI}
      CACHE_REDIS_PREFIX_KEY: ${CACHE_REDIS_PREFIX_KEY}
      CACHE_REDIS_SAVE_INSTANCES: ${CACHE_REDIS_SAVE_INSTANCES}
      CACHE_LOCAL_ENABLED: ${CACHE_LOCAL_ENABLED}
      QRCODE_COLOR: ${QRCODE_COLOR}
      QRCODE_LIMIT: ${QRCODE_LIMIT}
      CORS_ORIGIN: ${CORS_ORIGIN}
      CORS_METHODS: ${CORS_METHODS}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS}
      DEL_INSTANCE: ${DEL_INSTANCE}
      DEL_STORE_CREDS: ${DEL_STORE_CREDS}
      STORE_MESSAGES: ${STORE_MESSAGES}
      STORE_MESSAGE_UP: ${STORE_MESSAGE_UP}
      STORE_CONTACTS: ${STORE_CONTACTS}
      STORE_CHATS: ${STORE_CHATS}
      CLEAN_STORE_CLEANING_INTERVAL: ${CLEAN_STORE_CLEANING_INTERVAL}
      CLEAN_STORE_MESSAGES: ${CLEAN_STORE_MESSAGES}
      CLEAN_STORE_MESSAGE_UP: ${CLEAN_STORE_MESSAGE_UP}
      CLEAN_STORE_CONTACTS: ${CLEAN_STORE_CONTACTS}
      CLEAN_STORE_CHATS: ${CLEAN_STORE_CHATS}
      CONFIG_SESSION_PHONE_VERSION: ${CONFIG_SESSION_PHONE_VERSION}
    volumes:
      - evolution_data:/evolution/instances
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: always
    ports:
      - "8080:5678"
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=${N8N_PROTOCOL}
      - NODE_ENV=${NODE_ENV}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST}
      - DB_POSTGRESDB_PORT=${DB_POSTGRESDB_PORT}
      - DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE}
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=${DB_POSTGRESDB_SCHEMA}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  n8n_data:
  postgres_data:
  evolution_data:
  redis_data: